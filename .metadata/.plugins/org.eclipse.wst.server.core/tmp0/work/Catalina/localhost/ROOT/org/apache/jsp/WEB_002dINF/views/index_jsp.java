/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.50
 * Generated at: 2021-10-20 00:15:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/views/include/head.jsp", out, false);
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	<!-- Navbar area -->\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/views/include/top.jsp", out, false);
      out.write("\r\n");
      out.write("	<!-- end of Navbar area -->\r\n");
      out.write("\r\n");
      out.write("	<div class=\"container section\">\r\n");
      out.write("		<div class=\"carousel carousel-slider\">\r\n");
      out.write("			<a class=\"carousel-item\" href=\"#one!\"><img\r\n");
      out.write("				src=\"/resources/images/kirby1.jpg\"></a> <a class=\"carousel-item\"\r\n");
      out.write("				href=\"#two!\"><img src=\"/resources/images/kirby2.jpg\"></a> <a\r\n");
      out.write("				class=\"carousel-item\" href=\"#three!\"><img\r\n");
      out.write("				src=\"/resources/images/kirby3.jpg\"></a> <a class=\"carousel-item\"\r\n");
      out.write("				href=\"#four!\"><img src=\"/resources/images/kirby4.jpg\"></a>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<div class=\"section no-pad-bot\" id=\"index-banner\">\r\n");
      out.write("		<div class=\"container\">\r\n");
      out.write("			<br> <br>\r\n");
      out.write("			<h1 class=\"header center orange-text\">Starter Template</h1>\r\n");
      out.write("			<div class=\"row center\">\r\n");
      out.write("				<h5 class=\"header col s12 light\">A modern responsive front-end\r\n");
      out.write("					framework based on Material Design</h5>\r\n");
      out.write("			</div>\r\n");
      out.write("			<div class=\"row center\">\r\n");
      out.write("				<a href=\"http://materializecss.com/getting-started.html\"\r\n");
      out.write("					id=\"download-button\"\r\n");
      out.write("					class=\"btn-large waves-effect waves-light orange\">Get Started</a>\r\n");
      out.write("			</div>\r\n");
      out.write("			<br> <br>\r\n");
      out.write("\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<div class=\"container\">\r\n");
      out.write("		<div class=\"section\">\r\n");
      out.write("\r\n");
      out.write("			<!--   Icon Section   -->\r\n");
      out.write("			<div class=\"row\">\r\n");
      out.write("				<div class=\"col s12 m4\">\r\n");
      out.write("					<div class=\"icon-block\">\r\n");
      out.write("						<h2 class=\"center light-blue-text\">\r\n");
      out.write("							<i class=\"material-icons\">flash_on</i>\r\n");
      out.write("						</h2>\r\n");
      out.write("						<h5 class=\"center\">Speeds up development</h5>\r\n");
      out.write("\r\n");
      out.write("						<p class=\"light\">We did most of the heavy lifting for you to\r\n");
      out.write("							provide a default stylings that incorporate our custom\r\n");
      out.write("							components. Additionally, we refined animations and transitions\r\n");
      out.write("							to provide a smoother experience for developers.</p>\r\n");
      out.write("					</div>\r\n");
      out.write("				</div>\r\n");
      out.write("\r\n");
      out.write("				<div class=\"col s12 m4\">\r\n");
      out.write("					<div class=\"icon-block\">\r\n");
      out.write("						<h2 class=\"center light-blue-text\">\r\n");
      out.write("							<i class=\"material-icons\">group</i>\r\n");
      out.write("						</h2>\r\n");
      out.write("						<h5 class=\"center\">User Experience Focused</h5>\r\n");
      out.write("\r\n");
      out.write("						<p class=\"light\">By utilizing elements and principles of\r\n");
      out.write("							Material Design, we were able to create a framework that\r\n");
      out.write("							incorporates components and animations that provide more feedback\r\n");
      out.write("							to users. Additionally, a single underlying responsive system\r\n");
      out.write("							across all platforms allow for a more unified user experience.</p>\r\n");
      out.write("					</div>\r\n");
      out.write("				</div>\r\n");
      out.write("\r\n");
      out.write("				<div class=\"col s12 m4\">\r\n");
      out.write("					<div class=\"icon-block\">\r\n");
      out.write("						<h2 class=\"center light-blue-text\">\r\n");
      out.write("							<i class=\"material-icons\">settings</i>\r\n");
      out.write("						</h2>\r\n");
      out.write("						<h5 class=\"center\">Easy to work with</h5>\r\n");
      out.write("\r\n");
      out.write("						<p class=\"light\">We have provided detailed documentation as\r\n");
      out.write("							well as specific code examples to help new users get started. We\r\n");
      out.write("							are also always open to feedback and can answer any questions a\r\n");
      out.write("							user may have about Materialize.</p>\r\n");
      out.write("					</div>\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("\r\n");
      out.write("		</div>\r\n");
      out.write("		<br> <br>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("	<!-- footer area -->\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("	<!-- 클래스로 객체생성하지 않고 통째로 불러오기만 함 -->\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/views/include/bottom.jsp", out, false);
      out.write("\r\n");
      out.write("	<!--액션태그방식, 뒤에 '/' 붙여야함  클래스로 객체 생성해서 출력된 결과를 html로 가져옴, 성능적으로 우수 매소드같은 원리로 동작  -->\r\n");
      out.write("	<!-- end of footer area -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<!--  Scripts-->\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/views/include/commonJs.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("$(document).ready(function() {\r\n");
      out.write("\r\n");
      out.write("	setInterval(function() {\r\n");
      out.write("		$('.carousel').carousel('next');\r\n");
      out.write("	}, 3000);\r\n");
      out.write("	\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
